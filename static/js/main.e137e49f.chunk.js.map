{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","id","modelo","ventas","costo","data","setData","modalEditar","setModalEditar","modalEliminar","setModalEliminar","modalInsertar","setModalInsertar","neveraSeleccionado","setNeveraSeleccionado","seleccionarNevera","elemento","caso","handleChange","e","target","name","value","prevState","className","onClick","map","Modal","isOpen","ModalHeader","ModalBody","readOnly","type","onChange","ModalFooter","dataNueva","nevera","editar","filter","length","valorInsertar","push","insertar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e137e49f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Modal, ModalBody, ModalHeader, ModalFooter} from 'reactstrap';\n\nfunction App() {\n\n  const dataNeveras = [\n    { id: 1, modelo: \"LG\", ventas: 1000, costo : 1000000},\n    { id: 2, modelo: \"SAMSUNG\", ventas: 1500, costo: 1100000 },\n    { id: 3, modelo: \"ELECTROLUX\", ventas: 2000, costo: 1200000 },\n    { id: 4, modelo: \"HACEB\", ventas: 800, costo: 1300000 },\n    { id: 5, modelo: \"MABE\", ventas: 500, costo: 1400000 },\n    { id: 6, modelo: \"WHIRLPOORL\", ventas: 1050, costo: 1500000 },\n    { id: 7, modelo: \"CHALLENGER\", ventas: 3000, costo: 1600000 },\n    { id: 8, modelo: \"STORA\", ventas: 1700, costo: 1700000 },\n    { id: 9, modelo: \"OLIMPO\", ventas: 1900, costo: 1800000 },\n    { id: 10, modelo: \"IBG\", ventas: 1860, costo: 2000000 },\n  ];\n\n  const [data, setData] = useState(dataNeveras);\n  const [modalEditar, setModalEditar] = useState(false);\n  const [modalEliminar, setModalEliminar] = useState(false);\n  const [modalInsertar, setModalInsertar] = useState(false);\n\n  const [neveraSeleccionado, setNeveraSeleccionado] = useState({\n    id: '',\n    modelo: '',\n    ventas: '',\n    costo: ''\n  });\n\n  const seleccionarNevera=(elemento, caso)=>{\nsetNeveraSeleccionado(elemento);\n(caso==='Editar')?setModalEditar(true):setModalEliminar(true)\n  }\n\n  const handleChange=e=>{\n    const {name, value}=e.target;\n    setNeveraSeleccionado((prevState)=>({\n      ...prevState,\n      [name]: value\n    }));\n  }\n\n  const editar=()=>{\n    var dataNueva=data;\n    dataNueva.map(nevera=>{\n      if(nevera.id===neveraSeleccionado.id){\n        nevera.ventas=neveraSeleccionado.ventas;\n        nevera.modelo=neveraSeleccionado.modelo;\n        nevera.costo=neveraSeleccionado.costo;\n      }\n    });\n    setData(dataNueva);\n    setModalEditar(false);\n  }\n\n  const eliminar =()=>{\n    setData(data.filter(nevera=>nevera.id!==neveraSeleccionado.id));\n    setModalEliminar(false);\n  }\n\n  const abrirModalInsertar=()=>{\n    setNeveraSeleccionado(null);\n    setModalInsertar(true);\n  }\n\n  const insertar =()=>{\n    var valorInsertar=neveraSeleccionado;\n    valorInsertar.id=data[data.length-1].id+1;\n    var dataNueva = data;\n    dataNueva.push(valorInsertar);\n    setData(dataNueva);\n    setModalInsertar(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Registro de venta de neveras (2020)</h2>\n      <hr></hr>\n      <br />\n    <button className=\"btn btn-success\" onClick={()=>abrirModalInsertar()}>Agregar</button>\n    <br /><br />\n      <table className=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Modelo</th>\n            <th>Ventas Totales</th>\n            <th>Costo</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map(elemento=>(\n            <tr>\n              <td>{elemento.id}</td>\n              <td>{elemento.modelo}</td>\n              <td>{elemento.ventas}</td>\n              <td>{elemento.costo}</td>\n              <td><button className=\"btn btn-primary\" onClick={()=>seleccionarNevera(elemento, 'Editar')}>Editar</button> {\"   \"}\n              <button className=\"btn btn-danger\" onClick={()=>seleccionarNevera(elemento, 'Eliminar')}>Eliminar</button></td>\n            </tr>\n          ))\n          }\n        </tbody>\n      </table>\n\n      <Modal isOpen={modalEditar}>\n        <ModalHeader>\n          <div>\n            <h3>Editar Modelo</h3>\n          </div>\n        </ModalHeader>\n        <ModalBody>\n          <div className=\"form-group\">\n            <label>ID</label>\n            <input\n              className=\"form-control\"\n              readOnly\n              type=\"text\"\n              name=\"id\"\n              value={neveraSeleccionado && neveraSeleccionado.id}\n            />\n            <br />\n\n            <label>Modelo</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"modelo\"\n              value={neveraSeleccionado && neveraSeleccionado.modelo}\n              onChange={handleChange}\n            />\n            <br />\n\n            <label>ventas</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"ventas\"\n              value={neveraSeleccionado && neveraSeleccionado.ventas}\n              onChange={handleChange}\n            />\n            <br />\n\n            <label>costo</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"costo\"\n              value={neveraSeleccionado && neveraSeleccionado.costo}\n              onChange={handleChange}\n            />\n            <br />\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-primary\" onClick={()=>editar()}>\n            Actualizar\n          </button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={()=>setModalEditar(false)}\n          >\n            Cancelar\n          </button>\n        </ModalFooter>\n      </Modal>\n\n\n      <Modal isOpen={modalEliminar}>\n        <ModalBody>\n          Estás Seguro que deseas eliminar el modelo? {neveraSeleccionado && neveraSeleccionado.modelo}\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-danger\" onClick={()=>eliminar()}>\n            Sí\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            onClick={()=>setModalEliminar(false)}\n          >\n            No\n          </button>\n        </ModalFooter>\n      </Modal>\n\n\n        <Modal isOpen={modalInsertar}>\n        <ModalHeader>\n          <div>\n            <h3>Insertar Modelo</h3>\n          </div>\n        </ModalHeader>\n        <ModalBody>\n          <div className=\"form-group\">\n            <label>ID</label>\n            <input\n              className=\"form-control\"\n              readOnly\n              type=\"text\"\n              name=\"id\"\n              value={data[data.length-1].id+1}\n            />\n            <br />\n\n            <label>Modelo</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"modelo\"\n              value={neveraSeleccionado ? neveraSeleccionado.modelo: ''}\n              onChange={handleChange}\n            />\n            <br />\n\n            <label>ventas</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"ventas\"\n              value={neveraSeleccionado ? neveraSeleccionado.ventas: ''}\n              onChange={handleChange}\n            />\n            <br />\n\n            <label>costo</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"costo\"\n              value={neveraSeleccionado ? neveraSeleccionado.costo: ''}\n              onChange={handleChange}\n            />\n            <br />\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-primary\"\n          onClick={()=>insertar()}>\n            Insertar\n          </button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={()=>setModalInsertar(false)}\n          >\n            Cancelar\n          </button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n\r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n\r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n\r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n\r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n\r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n\r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n\r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}